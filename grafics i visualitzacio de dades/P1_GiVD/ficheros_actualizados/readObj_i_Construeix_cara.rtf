{\rtf1\ansi\ansicpg1252\cocoartf1265
{\fonttbl\f0\fmodern\fcharset0 Courier;\f1\fmodern\fcharset0 Courier-Oblique;}
{\colortbl;\red255\green255\blue255;\red15\green112\blue1;\red179\green179\blue179;\red109\green111\blue3;
\red107\green0\blue109;\red0\green0\blue109;\red107\green0\blue1;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720

\f0\fs24 \cf2 /\cf3  \cf2 Llegeix\cf3  \cf2 un\cf3  \cf2 fitxer\cf3  \cf2 .obj\cf0 \
\cf2 //\cf3   \cf2 Si\cf3  \cf2 el\cf3  \cf2 fitxer\cf3  \cf2 referencia\cf3  \cf2 fitxers\cf3  \cf2 de\cf3  \cf2 materials\cf3  \cf2 (.mtl),\cf3  \cf2 tambe\cf3  \cf2 es\cf3  \cf2 llegeixen.\cf0 \
\cf2 //\cf3   \cf2 Tots\cf3  \cf2 els\cf3  \cf2 elements\cf3  \cf2 del\cf3  \cf2 fitxer\cf3  \cf2 es\cf3  \cf2 llegeixen\cf3  \cf2 com\cf3  \cf2 a\cf3  \cf2 un\cf3  \cf2 unic\cf3  \cf2 objecte.\cf0 \
\cf2 //\cf0 \
\
\pard\pardeftab720
\cf4 void\cf3  \cf5 Objecte\cf0 ::
\f1\i readObj
\f0\i0 (QString\cf3  \cf0 filename)\
\{\
\
\pard\pardeftab720
\cf3     \cf5 FILE\cf3  \cf0 *fp\cf3  \cf0 =\cf3  \cf0 fopen(filename.toLocal8Bit(),\cf2 "rb"\cf0 );\
\cf3     \cf4 if\cf3  \cf0 (!fp)\
\cf3     \cf0 \{\
\cf3         \cf0 cout\cf3  \cf0 <<\cf3  \cf2 "No\cf3  \cf2 puc\cf3  \cf2 obrir\cf3  \cf2 el\cf3  \cf2 fitxer\cf3  \cf2 "\cf3  \cf0 <<\cf3  \cf0 endl;\
\cf3     \cf0 \}\
\cf3     \cf4 else\cf3  \cf0 \{\
\
\cf3         \cf4 int\cf3  \cf0 vindexAct\cf3  \cf0 =\cf3  \cf6 0\cf0 ;\
\cf3         \cf4 int\cf3  \cf0 vindexUlt\cf3  \cf0 =\cf3  \cf6 0\cf0 ;\
\
\cf3         \cf4 while\cf3  \cf0 (\cf4 true\cf0 )\
\cf3         \cf0 \{\
\cf3             \cf4 char\cf3  \cf0 *comment_ptr\cf3  \cf0 =\cf3  \cf5 ReadFile\cf0 ::fetch_line\cf3  \cf0 (fp);\
\
\cf3             \cf4 if\cf3  \cf0 (comment_ptr\cf3  \cf0 ==\cf3  \cf0 (\cf4 char\cf3  \cf0 *)\cf3  \cf0 -\cf6 1\cf0 )\cf3   \cf2 /*\cf3  \cf2 end-of-file\cf3  \cf2 */\cf0 \
\cf3                 \cf4 break\cf0 ;\
\
\cf3             \cf2 /*\cf3  \cf2 did\cf3  \cf2 we\cf3  \cf2 get\cf3  \cf2 a\cf3  \cf2 comment?\cf3  \cf2 */\cf0 \
\cf3             \cf4 if\cf3  \cf0 (comment_ptr)\cf3  \cf0 \{\
\cf3                 \cf2 //make_comment\cf3  \cf2 (comment_ptr);\cf0 \
\cf3                 \cf4 continue\cf0 ;\
\cf3             \cf0 \}\
\
\cf3             \cf2 /*\cf3  \cf2 if\cf3  \cf2 we\cf3  \cf2 get\cf3  \cf2 here,\cf3  \cf2 the\cf3  \cf2 line\cf3  \cf2 was\cf3  \cf2 not\cf3  \cf2 a\cf3  \cf2 comment\cf3  \cf2 */\cf0 \
\cf3             \cf4 int\cf3  \cf0 nwords\cf3  \cf0 =\cf3  \cf5 ReadFile\cf0 ::fetch_words();\
\
\cf3             \cf2 /*\cf3  \cf2 skip\cf3  \cf2 empty\cf3  \cf2 lines\cf3  \cf2 */\cf0 \
\cf3             \cf4 if\cf3  \cf0 (nwords\cf3  \cf0 ==\cf3  \cf6 0\cf0 )\
\cf3                 \cf4 continue\cf0 ;\
\
\cf3             \cf4 char\cf3  \cf0 *first_word\cf3  \cf0 =\cf3  \cf5 ReadFile\cf0 ::\cf7 words\cf0 [\cf6 0\cf0 ];\
\
\cf3             \cf4 if\cf3  \cf0 (!strcmp\cf3  \cf0 (first_word,\cf3  \cf2 "v"\cf0 ))\
\cf3             \cf0 \{\
\cf3                 \cf4 if\cf3  \cf0 (nwords\cf3  \cf0 <\cf3  \cf6 4\cf0 )\
\cf3                 \cf0 \{\
\cf3                     \cf0 fprintf\cf3  \cf0 (\cf6 stderr\cf0 ,\cf3  \cf2 "Too\cf3  \cf2 few\cf3  \cf2 coordinates"\cf0 );\cf2 //:\cf3  \cf2 '%s'",\cf3  \cf2 str_orig);\cf0 \
\cf3                     \cf0 exit\cf3  \cf0 (-\cf6 1\cf0 );\
\cf3                 \cf0 \}\
\cf3                 \cf0 QString\cf3  \cf0 sx(\cf5 ReadFile\cf0 ::\cf7 words\cf0 [\cf6 1\cf0 ]);\
\cf3                 \cf0 QString\cf3  \cf0 sy(\cf5 ReadFile\cf0 ::\cf7 words\cf0 [\cf6 2\cf0 ]);\
\cf3                 \cf0 QString\cf3  \cf0 sz(\cf5 ReadFile\cf0 ::\cf7 words\cf0 [\cf6 3\cf0 ]);\
\cf3                 \cf4 double\cf3  \cf0 x\cf3  \cf0 =\cf3  \cf0 sx.toDouble();\
\cf3                 \cf4 double\cf3  \cf0 y\cf3  \cf0 =\cf3  \cf0 sy.toDouble();\
\cf3                 \cf4 double\cf3  \cf0 z\cf3  \cf0 =\cf3  \cf0 sz.toDouble();\
\
\cf3                 \cf4 if\cf3  \cf0 (nwords\cf3  \cf0 ==\cf3  \cf6 5\cf0 )\
\cf3                 \cf0 \{\
\cf3                   \cf0 QString\cf3  \cf0 sw(\cf5 ReadFile\cf0 ::\cf7 words\cf0 [\cf6 4\cf0 ]);\
\cf3                   \cf4 double\cf3  \cf0 w\cf3  \cf0 =\cf3  \cf0 sw.toDouble();\
\cf3                   \cf0 x/=w;\
\cf3                   \cf0 y/=w;\
\cf3                   \cf0 z/=w;\
\cf3                 \cf0 \}\
\cf3                 \cf2 //\cf3  \cf2 S'afegeix\cf3  \cf2 el\cf3  \cf2 vertex\cf3  \cf2 a\cf3  \cf2 l'objecte\cf0 \
\cf3                 \cf7 vertexs\cf0 .push_back(\cf5 point4\cf0 (x,\cf3  \cf0 y,\cf3  \cf0 z,\cf3  \cf6 1\cf0 ));\
\cf3                 \cf0 vindexAct++;\
\
\cf3             \cf0 \}\
\cf3             \cf4 else\cf3  \cf4 if\cf3  \cf0 (!strcmp\cf3  \cf0 (first_word,\cf3  \cf2 "vn"\cf0 ))\cf3  \cf0 \{\
\cf3             \cf0 \}\
\cf3             \cf4 else\cf3  \cf4 if\cf3  \cf0 (!strcmp\cf3  \cf0 (first_word,\cf3  \cf2 "vt"\cf0 ))\cf3  \cf0 \{\
\cf3             \cf0 \}\
\cf3             \cf4 else\cf3  \cf4 if\cf3  \cf0 (!strcmp\cf3  \cf0 (first_word,\cf3  \cf2 "f"\cf0 ))\cf3  \cf0 \{\
\cf3                 \cf2 //\cf3  \cf2 S'afegeix\cf3  \cf2 la\cf3  \cf2 cara\cf3  \cf2 a\cf3  \cf2 l'objecte\cf0 \
\cf3                 \cf0 construeix_cara\cf3  \cf0 (&\cf5 ReadFile\cf0 ::\cf7 words\cf0 [\cf6 1\cf0 ],\cf3  \cf0 nwords-\cf6 1\cf0 ,\cf3  \cf4 this\cf0 ,\cf3  \cf0 vindexUlt);\
\cf3             \cf0 \}\
\cf3             \cf2 //\cf3  \cf2 added\cf0 \
\cf3             \cf4 else\cf3  \cf4 if\cf3  \cf0 (!strcmp\cf3  \cf0 (first_word,\cf3  \cf2 "mtllib"\cf0 ))\cf3  \cf0 \{\
\cf3                 \cf2 //read_mtllib\cf3  \cf2 (&words[1],\cf3  \cf2 nwords-1,\cf3  \cf2 matlib,\cf3  \cf2 filename);\cf0 \
\cf3             \cf0 \}\
\cf3             \cf4 else\cf3  \cf4 if\cf3  \cf0 (!strcmp\cf3  \cf0 (first_word,\cf3  \cf2 "usemtl"\cf0 ))\cf3  \cf0 \{\
\cf3                 \cf2 //int\cf3  \cf2 size\cf3  \cf2 =\cf3  \cf2 strlen(words[1])-1;\cf0 \
\cf3                 \cf2 //while\cf3  \cf2 (size\cf3  \cf2 &&\cf3  \cf2 (words[1][size]=='\\n'\cf3  \cf2 ||\cf3  \cf2 words[1][size]=='\\r')\cf3  \cf2 )\cf3  \cf2 words[1][size--]=0;\cf0 \
\cf3                 \cf2 //currentMaterial\cf3  \cf2 =\cf3  \cf2 matlib.index(words[1]);\cf0 \
\cf3             \cf0 \}\
\cf3             \cf4 else\cf3  \cf4 if\cf3  \cf0 (!strcmp\cf3  \cf0 (first_word,\cf3  \cf2 "o"\cf0 ))\cf3  \cf0 \{\
\cf3                 \cf2 //cada\cf3  \cf2 nou\cf3  \cf2 objecte\cf3  \cf2 s'actualitza\cf3  \cf2 aquest\cf3  \cf2 \'c3\'adndex\cf0 \
\cf3                 \cf0 vindexUlt\cf3  \cf0 =\cf3  \cf0 vindexAct;\
\cf3             \cf0 \}\
\cf3             \cf2 //\cf3  \cf2 fadded\cf0 \
\cf3             \cf4 else\cf3  \cf0 \{\
\cf3                 \cf2 //fprintf\cf3  \cf2 (stderr,\cf3  \cf2 "Do\cf3  \cf2 not\cf3  \cf2 recognize:\cf3  \cf2 '%s'\\n",\cf3  \cf2 str_orig);\cf0 \
\cf3             \cf0 \}\
\
\cf3             \cf2 //free(words);\cf0 \
\cf3         \cf0 \}\
\cf3     \cf0 \}\
\
\}\
\
\
\pard\pardeftab720
\cf4 void\cf3  \cf5 Objecte\cf0 ::construeix_cara\cf3  \cf0 (\cf3  \cf4 char\cf3  \cf0 **words,\cf3  \cf4 int\cf3  \cf0 nwords,\cf3  \cf5 Objecte\cf0 *objActual,\cf3  \cf4 int\cf3  \cf0 vindexUlt)\
\{\
\pard\pardeftab720
\cf3     \cf5 Cara\cf3  \cf0 face;\
\cf3     \cf4 for\cf3  \cf0 (\cf4 int\cf3  \cf0 i\cf3  \cf0 =\cf3  \cf6 0\cf0 ;\cf3  \cf0 i\cf3  \cf0 <\cf3  \cf0 nwords;\cf3  \cf0 i++)\
\cf3     \cf0 \{\
\cf3         \cf4 int\cf3  \cf0 vindex;\
\cf3         \cf4 int\cf3  \cf0 nindex;\
\cf3         \cf4 int\cf3  \cf0 tindex;\
\
\cf3         \cf4 if\cf3  \cf0 ((words[i][\cf6 0\cf0 ]>=\cf2 '0'\cf0 )&&(words[i][\cf6 0\cf0 ]<=\cf2 '9'\cf0 ))\
\cf3         \cf0 \{\
\cf3             \cf5 ReadFile\cf0 ::get_indices\cf3  \cf0 (words[i],\cf3  \cf0 &vindex,\cf3  \cf0 &tindex,\cf3  \cf0 &nindex);\
\
\pard\pardeftab720
\cf6 #if\cf3  \cf6 0\cf0 \
\pard\pardeftab720
\cf3             \cf0 printf\cf3  \cf0 (\cf2 "vtn:\cf3  \cf2 %d\cf3  \cf2 %d\cf3  \cf2 %d\\n"\cf0 ,\cf3  \cf0 vindex,\cf3  \cf0 tindex,\cf3  \cf0 nindex);\
\pard\pardeftab720
\cf6 #endif\cf0 \
\
\pard\pardeftab720
\cf3             \cf2 /*\cf3  \cf2 store\cf3  \cf2 the\cf3  \cf2 vertex\cf3  \cf2 index\cf3  \cf2 */\cf0 \
\
\cf3             \cf4 if\cf3  \cf0 (vindex\cf3  \cf0 >\cf3  \cf6 0\cf0 )\cf3        \cf2 /*\cf3  \cf2 indices\cf3  \cf2 are\cf3  \cf2 from\cf3  \cf2 one,\cf3  \cf2 not\cf3  \cf2 zero\cf3  \cf2 */\cf0 \
\cf3                 \cf0 face.\cf7 idxVertices\cf0 .push_back(vindex\cf3  \cf0 -\cf3  \cf6 1\cf3  \cf0 -\cf3  \cf0 vindexUlt);\
\cf3             \cf4 else\cf3  \cf4 if\cf3  \cf0 (vindex\cf3  \cf0 <\cf3  \cf6 0\cf0 )\cf3   \cf2 /*\cf3  \cf2 negative\cf3  \cf2 indices\cf3  \cf2 mean\cf3  \cf2 count\cf3  \cf2 backwards\cf3  \cf2 */\cf0 \
\cf3                 \cf0 face.\cf7 idxVertices\cf0 .push_back(objActual->\cf7 vertexs\cf0 .size()\cf3  \cf0 +\cf3  \cf0 vindex\cf3  \cf0 -\cf3  \cf0 vindexUlt);\
\cf3             \cf4 else\cf0 \
\cf3             \cf0 \{\
\cf3                 \cf0 fprintf\cf3  \cf0 (\cf6 stderr\cf0 ,\cf3  \cf2 "Zero\cf3  \cf2 indices\cf3  \cf2 not\cf3  \cf2 allowed"\cf0 );\cf2 //:\cf3  \cf2 '%s'\\n",\cf3  \cf2 str_orig);\cf0 \
\cf3                 \cf0 exit\cf3  \cf0 (-\cf6 1\cf0 );\
\cf3             \cf0 \}\
\cf3         \cf0 \}\
\cf3     \cf0 \}\
\cf3     \cf0 face.\cf7 color\cf3  \cf0 =\cf3  \cf5 vec4\cf0 (\cf6 1.0\cf0 ,\cf3  \cf6 0.0\cf0 ,\cf3  \cf6 0.0\cf0 ,\cf3  \cf6 1.0\cf0 );\
\cf3     \cf0 objActual->\cf7 cares\cf0 .push_back(face);\
\}\
\
\
\
}